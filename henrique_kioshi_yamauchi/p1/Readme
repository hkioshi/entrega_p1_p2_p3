
# Compilador, Assembler e Executor para Linguagem Neander

**Autor:** Henrique Kioshi Yamauchi
**Curso:** BCC
---

## üìö Descri√ß√£o

Este projeto implementa um pipeline completo para uma linguagem de programa√ß√£o simples inspirada no processador **Neander**. O sistema √© composto por tr√™s etapas:

1. **Compilador (`compilador`)** ‚Äì Converte um c√≥digo fonte `.lpn` para `.asm`.
2. **Assembler (`assembler`)** ‚Äì Converte o c√≥digo `.asm` para `.bin`.
3. **Executor (`executor`)** ‚Äì Executa o bin√°rio `.bin` simulando o Neander.

---

## üõ†Ô∏è Compila√ß√£o

Voc√™ pode compilar todos os artefatos com o comando:

```bash
make
```

Esse comando ir√° gerar os seguintes execut√°veis:

- `compilador` (a partir de `parcer.c`)
- `assembler` (a partir de `interpretador.c`)
- `executor` (a partir de `executor.c`)

---

## üöÄ Como Usar

### 1. Escreva um programa `.lpn`
Crie um arquivo chamado `programa.lpn`. Exemplo dispon√≠vel no reposit√≥rio.

### 2. Compile e gere `.asm`
```bash
./compilador
```

### 3. Gere `.bin` a partir do `.asm`
```bash
./assembler
```

### 4. Execute o programa
```bash
./executor
```

### 5. Para rodar tudo de uma vez
```bash
make run
```

### 6. Para limpar os arquivos gerados
```bash
make clean
```

---

## üìÑ Estrutura dos Arquivos

- `parcer.c`: L√™ `.lpn` e gera `.asm`.
- `interpretador.c`: L√™ `.asm` e gera `.bin`.
- `executor.c`: Simula a execu√ß√£o do `.bin`.
- `programa.lpn`: Exemplo de programa na linguagem criada.
- `gramatica.pdf`: Gram√°tica BNF reconhecida pelo compilador.
- `assembler.pdf`: Descri√ß√£o da estrutura e gram√°tica do assembler.
- `Makefile`: Script para constru√ß√£o dos execut√°veis e automa√ß√£o.

---

## ‚úÖ Funcionalidades

- Declara√ß√£o de vari√°veis com valores ou indefinidas (`?`).
- Atribui√ß√µes com soma (`X = A + B`).
- Gera√ß√£o de instru√ß√µes Neander (`LDA`, `ADD`, `STA`, `HLT`).
- Tradu√ß√£o para mem√≥ria bin√°ria simulada.
- Simula√ß√£o completa com flags `Z` e `N`, acumulador e contador de programa.

---

## ‚ö†Ô∏è Limita√ß√µes Conhecidas

- Apenas express√µes simples com soma s√£o suportadas.
- Apenas as instru√ß√µes `LDA`, `ADD`, `STA`, `HLT` e controle de fluxo b√°sicos est√£o implementadas.
- N√£o h√° verifica√ß√£o de uso de vari√°veis n√£o declaradas.
- N√£o h√° suporte para subtra√ß√£o, multiplica√ß√£o ou controle mais complexo (condi√ß√µes aninhadas, la√ßos etc.).

---

## üìé Exemplo de programa.lpn

```lpn
PROGRAMA
A = 10
B = 20
C = ?
INICIO
C = A + B
FIM
```

---

## üß† Observa√ß√µes

- O projeto √© modular, podendo ser facilmente estendido para incluir novas instru√ß√µes do Neander.
- Os arquivos bin√°rios seguem o padr√£o de cabe√ßalho especificado com 516 bytes de mem√≥ria simulada.

---
